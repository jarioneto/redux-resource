{"code":"export var Status;\r\n(function (Status) {\r\n    Status[\"Pristine\"] = \"pristine\";\r\n    Status[\"Pending\"] = \"pending\";\r\n    Status[\"Success\"] = \"success\";\r\n    Status[\"Error\"] = \"error\";\r\n})(Status || (Status = {}));\r\n","references":[],"dts":{"name":"/Users/isac/Projects/React/redux-resource/types.d.ts","writeByteOrderMark":false,"text":"export declare enum Status {\r\n    Pristine = \"pristine\",\r\n    Pending = \"pending\",\r\n    Success = \"success\",\r\n    Error = \"error\"\r\n}\r\nexport declare type SagaEventHandler = (data: {\r\n    requestData?: Object;\r\n    responseData: Object;\r\n}) => void;\r\nexport interface ResourceOperation {\r\n    status: Status;\r\n    error: null | Object;\r\n}\r\nexport interface Resource<T> {\r\n    data: T | null;\r\n    load: ResourceOperation;\r\n    create: ResourceOperation;\r\n    update: ResourceOperation;\r\n    remove: ResourceOperation;\r\n}\r\nexport interface Action {\r\n    type: string;\r\n    params?: Object;\r\n    error?: Object;\r\n    data?: Object;\r\n}\r\nexport interface FunctionMap {\r\n    [key: string]: (...args: any) => any;\r\n}\r\nexport interface ResourceTypes {\r\n    LOAD: string;\r\n    LOAD_PROGRESS: string;\r\n    LOAD_SUCCESS: string;\r\n    LOAD_ERROR: string;\r\n    RESET_LOAD_STATUS: string;\r\n    CREATE: string;\r\n    CREATE_PROGRESS: string;\r\n    CREATE_SUCCESS: string;\r\n    CREATE_ERROR: string;\r\n    RESET_CREATE_STATUS: string;\r\n    UPDATE: string;\r\n    UPDATE_PROGRESS: string;\r\n    UPDATE_SUCCESS: string;\r\n    UPDATE_ERROR: string;\r\n    RESET_UPDATE_STATUS: string;\r\n    REMOVE: string;\r\n    REMOVE_PROGRESS: string;\r\n    REMOVE_SUCCESS: string;\r\n    REMOVE_ERROR: string;\r\n    RESET_REMOVE_STATUS: string;\r\n}\r\nexport interface ResourceActions {\r\n    load: (params?: any) => Action;\r\n    setLoadProgress: () => Action;\r\n    setLoadSuccess: (data: any) => Action;\r\n    setLoadError: (error: any) => Action;\r\n    resetLoadStatus: () => Action;\r\n    create: (data?: any) => Action;\r\n    setCreateProgress: () => Action;\r\n    setCreateSuccess: () => Action;\r\n    setCreateError: (error: any) => Action;\r\n    resetCreateStatus: () => Action;\r\n    update: (data?: any) => Action;\r\n    setUpdateProgress: () => Action;\r\n    setUpdateSuccess: () => Action;\r\n    setUpdateError: (error: any) => Action;\r\n    resetUpdateStatus: () => Action;\r\n    remove: (data?: any) => Action;\r\n    setRemoveProgress: () => Action;\r\n    setRemoveSuccess: () => Action;\r\n    setRemoveError: (error: any) => Action;\r\n    resetRemoveStatus: () => Action;\r\n}\r\nexport interface ResourceApi {\r\n    load?: (params?: any) => Promise<any>;\r\n    create?: (data?: any) => Promise<any>;\r\n    update?: (data?: any) => Promise<any>;\r\n    remove?: (data?: any) => Promise<any>;\r\n}\r\nexport interface ResourceEventHandlers {\r\n    load?: SagaEventHandler;\r\n    create?: SagaEventHandler;\r\n    update?: SagaEventHandler;\r\n    remove?: SagaEventHandler;\r\n}\r\nexport interface SagaTree {\r\n    [key: string]: (() => any) | SagaTree;\r\n}\r\n"}}
