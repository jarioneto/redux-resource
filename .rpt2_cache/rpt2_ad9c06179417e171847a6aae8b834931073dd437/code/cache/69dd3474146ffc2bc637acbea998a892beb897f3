{"code":"import { createResourceActions } from './actions';\r\nimport { createReducer, createResourceReducer } from './reducers';\r\nimport { createResourceSagas, createEffects, getTypeToSagaMap } from './sagas';\r\nvar createResource = function (namespace, api, sagasOnSuccessHandlers) {\r\n    var _a = createResourceActions(namespace), actions = _a.actions, types = _a.types;\r\n    var reducers = createResourceReducer(types);\r\n    var sagas = createResourceSagas(actions, types, api, sagasOnSuccessHandlers);\r\n    return { actions: actions, types: types, reducers: reducers, sagas: sagas };\r\n};\r\nexport default createResource;\r\nexport * from './status';\r\nexport * from './types';\r\nexport { createResourceActions, createReducer, createResourceReducer, createResourceSagas, createEffects, getTypeToSagaMap, };\r\n","references":["/Users/isac/Projects/React/redux-resource/src/types.ts","/Users/isac/Projects/React/redux-resource/src/actions.ts","/Users/isac/Projects/React/redux-resource/src/reducers.ts","/Users/isac/Projects/React/redux-resource/src/sagas.ts","/Users/isac/Projects/React/redux-resource/src/status.ts","/Users/isac/Projects/React/redux-resource/src/types.ts"],"dts":{"name":"/Users/isac/Projects/React/redux-resource/index.d.ts","writeByteOrderMark":false,"text":"import { ResourceApi, ResourceEventHandlers } from './types';\r\nimport { createResourceActions } from './actions';\r\nimport { createReducer, createResourceReducer } from './reducers';\r\nimport { createResourceSagas, createEffects, getTypeToSagaMap } from './sagas';\r\ndeclare const createResource: (namespace: string, api: ResourceApi, sagasOnSuccessHandlers?: ResourceEventHandlers | undefined) => {\r\n    actions: import(\"./types\").ResourceActions;\r\n    types: import(\"./types\").ResourceTypes;\r\n    reducers: (state: Object | undefined, action: import(\"./types\").Action) => any;\r\n    sagas: import(\"./types\").FunctionMap;\r\n};\r\nexport default createResource;\r\nexport * from './status';\r\nexport * from './types';\r\nexport { createResourceActions, createReducer, createResourceReducer, createResourceSagas, createEffects, getTypeToSagaMap, };\r\n"}}
