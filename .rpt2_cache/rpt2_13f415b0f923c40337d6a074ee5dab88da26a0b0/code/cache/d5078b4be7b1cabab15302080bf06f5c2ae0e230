{"code":"import * as tslib_1 from \"tslib\";\r\nimport { call, put, takeLatest, all } from 'redux-saga/effects';\r\nimport { map, forEach } from 'lodash';\r\nexport function createEffects(typeToSagaMap) {\r\n    return tslib_1.__generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0: return [4 /*yield*/, all(map(typeToSagaMap, function (saga, type) { return takeLatest(type, saga); }))];\r\n            case 1:\r\n                _a.sent();\r\n                return [2 /*return*/];\r\n        }\r\n    });\r\n}\r\nexport var getTypeToSagaMap = function (sagaTree, result) {\r\n    if (result === void 0) { result = {}; }\r\n    forEach(sagaTree, function (value, key) {\r\n        if (typeof value === 'function')\r\n            result[key] = value; // eslint-disable-line\r\n        else\r\n            getTypeToSagaMap(value, result);\r\n    });\r\n    return result;\r\n};\r\nexport var loadResource = function (actions, load, onSuccess) {\r\n    return function (_a) {\r\n        var setLoadProgress, setLoadSuccess, setLoadError, data, error_1;\r\n        var params = _a.params;\r\n        return tslib_1.__generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    setLoadProgress = actions.setLoadProgress, setLoadSuccess = actions.setLoadSuccess, setLoadError = actions.setLoadError;\r\n                    _b.label = 1;\r\n                case 1:\r\n                    _b.trys.push([1, 7, , 9]);\r\n                    return [4 /*yield*/, put(setLoadProgress())];\r\n                case 2:\r\n                    _b.sent();\r\n                    return [4 /*yield*/, call(load, params)];\r\n                case 3:\r\n                    data = _b.sent();\r\n                    return [4 /*yield*/, put(setLoadSuccess(data))];\r\n                case 4:\r\n                    _b.sent();\r\n                    if (!onSuccess) return [3 /*break*/, 6];\r\n                    return [4 /*yield*/, onSuccess({ requestData: params, responseData: data })];\r\n                case 5:\r\n                    _b.sent();\r\n                    _b.label = 6;\r\n                case 6: return [3 /*break*/, 9];\r\n                case 7:\r\n                    error_1 = _b.sent();\r\n                    return [4 /*yield*/, put(setLoadError(error_1))];\r\n                case 8:\r\n                    _b.sent();\r\n                    return [3 /*break*/, 9];\r\n                case 9: return [2 /*return*/];\r\n            }\r\n        });\r\n    };\r\n};\r\nexport var modifyResource = function (props) {\r\n    var setProgress = props.setProgress, setSuccess = props.setSuccess, setError = props.setError, execute = props.execute, onSuccess = props.onSuccess;\r\n    return function (_a) {\r\n        var response, error_2;\r\n        var data = _a.data;\r\n        return tslib_1.__generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    _b.trys.push([0, 6, , 8]);\r\n                    return [4 /*yield*/, put(setProgress())];\r\n                case 1:\r\n                    _b.sent();\r\n                    return [4 /*yield*/, call(execute, data)];\r\n                case 2:\r\n                    response = _b.sent();\r\n                    return [4 /*yield*/, put(setSuccess())];\r\n                case 3:\r\n                    _b.sent();\r\n                    if (!onSuccess) return [3 /*break*/, 5];\r\n                    return [4 /*yield*/, onSuccess({ requestData: data, responseData: response })];\r\n                case 4:\r\n                    _b.sent();\r\n                    _b.label = 5;\r\n                case 5: return [3 /*break*/, 8];\r\n                case 6:\r\n                    error_2 = _b.sent();\r\n                    return [4 /*yield*/, put(setError(error_2))];\r\n                case 7:\r\n                    _b.sent();\r\n                    return [3 /*break*/, 8];\r\n                case 8: return [2 /*return*/];\r\n            }\r\n        });\r\n    };\r\n};\r\nexport var missingSagaError = function (_a) {\r\n    var type = _a.type;\r\n    throw new Error(\"Missing saga for resource. No api function has been provided for action \" + type);\r\n};\r\nexport var createResourceSagas = function (actions, types, api, onSuccess) {\r\n    if (onSuccess === void 0) { onSuccess = {}; }\r\n    var sagas = {};\r\n    if (api.load)\r\n        sagas[types.LOAD] = loadResource(actions, api.load, onSuccess.load);\r\n    else\r\n        sagas[types.LOAD] = missingSagaError;\r\n    if (api.create) {\r\n        var createSaga = modifyResource({\r\n            setProgress: actions.setCreateProgress,\r\n            setSuccess: actions.setCreateSuccess,\r\n            setError: actions.setCreateError,\r\n            execute: api.create,\r\n            onSuccess: onSuccess.create,\r\n        });\r\n        sagas[types.CREATE] = createSaga;\r\n    }\r\n    else {\r\n        sagas[types.CREATE] = missingSagaError;\r\n    }\r\n    if (api.update) {\r\n        var updateSaga = modifyResource({\r\n            setProgress: actions.setUpdateProgress,\r\n            setSuccess: actions.setUpdateSuccess,\r\n            setError: actions.setUpdateError,\r\n            execute: api.update,\r\n            onSuccess: onSuccess.update,\r\n        });\r\n        sagas[types.UPDATE] = updateSaga;\r\n    }\r\n    else {\r\n        sagas[types.UPDATE] = missingSagaError;\r\n    }\r\n    if (api.remove) {\r\n        var removeSaga = modifyResource({\r\n            setProgress: actions.setRemoveProgress,\r\n            setSuccess: actions.setRemoveSuccess,\r\n            setError: actions.setRemoveError,\r\n            execute: api.remove,\r\n            onSuccess: onSuccess.remove,\r\n        });\r\n        sagas[types.REMOVE] = removeSaga;\r\n    }\r\n    else {\r\n        sagas[types.REMOVE] = missingSagaError;\r\n    }\r\n    return sagas;\r\n};\r\n","references":["/Users/isac/Projects/React/redux-resource/src/types.ts","/Users/isac/Projects/React/redux-resource/node_modules/redux-saga/effects.d.ts","/Users/isac/Projects/React/redux-resource/node_modules/@types/lodash/index.d.ts"],"dts":{"name":"/Users/isac/Projects/React/redux-resource/sagas.d.ts","writeByteOrderMark":false,"text":"import { FunctionMap, Action, ResourceTypes, SagaEventHandler, SagaTree, ResourceActions, ResourceApi, ResourceEventHandlers } from './types';\r\ninterface ModifyResource {\r\n    setProgress: () => Action;\r\n    setSuccess: () => Action;\r\n    setError: (error: Object) => Action;\r\n    execute: (data: any) => Promise<any>;\r\n    onSuccess?: SagaEventHandler;\r\n}\r\nexport declare function createEffects(typeToSagaMap: FunctionMap): IterableIterator<import(\"@redux-saga/types\").CombinatorEffect<\"ALL\", import(\"@redux-saga/types\").SimpleEffect<\"FORK\", import(\"redux-saga/effects\").ForkEffectDescriptor>>>;\r\nexport declare const getTypeToSagaMap: (sagaTree: SagaTree, result?: FunctionMap) => FunctionMap;\r\nexport declare const loadResource: (actions: ResourceActions, load: (params?: Object | undefined) => Promise<any>, onSuccess?: SagaEventHandler | undefined) => ({ params }: Action) => IterableIterator<void | import(\"@redux-saga/types\").SimpleEffect<\"PUT\", import(\"redux-saga/effects\").PutEffectDescriptor<Action>> | import(\"@redux-saga/types\").SimpleEffect<\"CALL\", import(\"redux-saga/effects\").CallEffectDescriptor>>;\r\nexport declare const modifyResource: (props: ModifyResource) => ({ data }: Action) => IterableIterator<void | import(\"@redux-saga/types\").SimpleEffect<\"PUT\", import(\"redux-saga/effects\").PutEffectDescriptor<Action>> | import(\"@redux-saga/types\").SimpleEffect<\"CALL\", import(\"redux-saga/effects\").CallEffectDescriptor>>;\r\nexport declare const missingSagaError: ({ type }: Action) => never;\r\nexport declare const createResourceSagas: (actions: ResourceActions, types: ResourceTypes, api: ResourceApi, onSuccess?: ResourceEventHandlers) => FunctionMap;\r\nexport {};\r\n"}}
